import { FC, useState, useEffect } from 'react'
import { Search } from '../src/components/search'
import { MovieList } from '@/src/components/movieList';
import { getMovies } from '@/src/API/getData';
import { Movie } from '@/src/types/Movie';
import { useRouter } from 'next/router';
import { normalizeString } from '@/src/utils/normalizeString';
import { normalizeNumber } from '@/src/utils/normalizeNumber';
import Head from 'next/head'
import cn from 'classnames';

interface Props {
  moviesRenderedOnServer?: Movie[],
  totalPagesRenderedOnServer?: number
}

const Home: FC<Props> = ({
  moviesRenderedOnServer,
  totalPagesRenderedOnServer,
}) => {
  const router = useRouter();
  const { search, page } = router.query;

  const [movies, setMovies] = useState<Movie[]>(moviesRenderedOnServer || []);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [totalPages, setTotalPages] = useState(totalPagesRenderedOnServer || 1);
  const [isFirstRender, setisFirstRender] = useState(true);

  const normalizedPage = normalizeNumber(page) || 1;
  const normalizedSearch = normalizeString(search)


  const loadMovies = async () => {
    if (!normalizedSearch) {
      return
    }

    setIsLoading(true);

    const data = await getMovies(normalizedSearch, normalizedPage);

    if (!data) {
      setError('problem with loading, try later');
      setMovies([]);
    } else {
      setTotalPages(data.total_pages);
      setMovies(data.results);
    }

    setIsLoading(false);
  }

  useEffect(() => {
    if(!isFirstRender) {
      loadMovies();
    }

    setisFirstRender(false);
  }, [normalizedPage, normalizedSearch])


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="movies.ico" />
      </Head>
      <main>
        <div
          className={cn({
            container: true,
            'container--with-movies': search,
          })}
        >
          <Search isLoading={isLoading} />

          {normalizedSearch && (
            <MovieList
              movies={movies}
              searchQuery={normalizedSearch}
              error={error}
              isLoading={isLoading}
              page={normalizedPage}
              totalPages={totalPages}
            />
          )}
        </div>
      </main>
    </>
  )
}

interface Context {
  query: {
    search?: string,
    page?: string,
  },
}

export const getServerSideProps = async (context: Context) => {
  const { page, search } = context.query;

  const defaultProps = {
    props: {
      moviesRenderedOnServer: [],
      totalPagesRenderedOnServer: 1,
    },
  };

  if (!search) {
    return defaultProps;
  }

  const normalizedPage = page ? +page : 1;

  const data = await getMovies(search, normalizedPage);

  if (!data) {
    return defaultProps;
  }

  return {
    props: {
      moviesRenderedOnServer: data.results,
      totalPagesRenderedOnServer: data.total_pages,
    }
  }
}

export default Home;
